mixin css()
  h2 CSS

  h3#c-syntax Синтаксис

  ul
    li После значения свойства обязательно ставится точка с запятой.
    li Для отступов внутри правил используются два пробела. Для правильного форматирования используйте файл #[a(href="https://github.com/htmlacademy/codeguide/blob/master/.editorconfig" target="_blank") .editorconfig] в вашем редакторе.
    li Шестнадцатеричное значение цвета не сокращается, а пишется полностью из всех шести символов. Для записи используются строчные буквы. Например, #[span.code #f5f5f5.]
    li Названия тегов и свойств в правилах пишутся строчными буквами.
    li Начальный ноль для значений не сокращается (например, #[span.code .5] вместо #[span.code 0.5]).
    li Во всех случаях в стилях используются двойные кавычки. В необязательных случаях кавычки не опускаются.
    li После двоеточия в правилах ставится один пробел (#[span.code top: 10px;]). А перед двоеточием пробел не нужен.
    li После запятых внутри значений #[span.code rgb()], #[span.code rgba()], #[span.code hsl()], #[span.code hsla()] или #[span.code rect()] пробелы ставятся. Это повышает читаемость.
    li До и после комбинатора между селекторами (например, #[span.code p > a]) ставится один пробел.
    li Каждое объявление в правиле пишется на новой строке.
    li Перед открывающейся фигурной скобкой ставится один пробел. После скобки запись идёт с новой строки
    li Закрывающая фигурная скобка пишется на новой строке и без отступа. Следующее после этого правило отделяется пустой строкой.
    li Единицы измерения не пишутся, там где в них нет необходимости. Например, #[span.code border: 0].
      span.as
      span.br  (
      span.mark Для автоматизации соблюдения вышеуказанных правил можно использовать #[a(href="http://csscomb.com/" target="_blank") CSSComb]
      span.br )

  h3#c-order Порядок свойств

  p Объявления логически связанных свойств группируются в следующем порядке:
    ol
      li Позиционирование
      li Блочная модель
      li Типографика
      li Оформление
      li Анимация
      li Разное

  p Позиционирование следует первым потому, что оно влияет на положение блоков в потоке документа. Блочная модель идёт следующей, так как она определяет размеры и расположение блоков.

  p Все остальные объявления, которые изменяют вид внутренних частей блоков и не оказывают влияния на другие блоки, идут в последнюю очередь.

  p Сгруппированные объявления в правиле отделяются друг от друга пустой строкой.

  p Порядок объявления подробных правил, таких как #[span.code font-size], #[span.code font-family], #[span.code line-height], должен соответствовать порядку в сокращённой версии правила. В случае совместного использования подробных и сокращённых правил, первой должна идти сокращённая версия.

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-css
        :code
          .declaration-order {
            /* Позиционирование */
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: 100;

            /* Блочная модель */
            display: block;
            float: right;
            width: 100px;
            height: 100px;
            margin: 10px;
            padding: 10px;

            /* Типографика */
            font: normal 13px/1.5 "Arial", sans-serif;
            font-style: normal;
            font-size: 13px;
            line-height: 1.5;
            font-family: "Arial", sans-serif;
            text-align: center;

            /* Оформление */
            color: #333333;
            background-color: #f5f5f5;
            border: 1px solid #e5e5e5;
            border-radius: 3px;
            opacity: 1;

            /* Анимация */
            transition: color 1s;

            /* Разное */
            will-change: auto;
          }

  h3#c-classnames Имена классов

  p Имена классов пишутся строчными буквами, используется дефис (но не знаки нижнего подчёркивания или camelCase).

  p Имена классов должны быть такими, чтобы по ним можно было быстро понять какому элементу страницы задан класс: избегайте сокращений (единственное исключение — #[span.code .btn] для кнопок), но не делайте их слишком длинными (более трёх слов).

  p Для написания классов используются английские слова и термины. Транслитом названия классов и атрибутов не пишутся.

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-css
        :code
          /* Хорошо */
          .alert--danger { … }
          .tweet .user-picture { … }
          .button { … }
          .layout--center { … }

          /* Плохо */
          .testElement { … }
          .t { … }
          .big_red_button { … }
          .knopka { … }

  p Для именования классов используются принципы БЭМ с небольшими изменениями в синтаксисе.

  h3#c-why-bem Почему БЭМ?
  ul
    li Самодокументируемость
    li Имитация пространства имён (простота и безопасность модификации).
    li Отсутствие зависимости от DOM-структуры.
    li Проектное реиспользование блоков.
    li Кросспроектное реиспользование блоков.

  p Само понятие БЭМ — не только метод именования селекторов, но парадигма восприятия проекта как набора сущностей (блоки, элементы, модификаторы). Полный стек БЭМ подразумевает двойную шаблонизацию и имеет относительно высокий порог входа. Используйте БЭМ хотя бы как способ именования селекторов.

  h3#c-bem-block БЭМ-блок
  p Блок — это самостоятельная часть страницы. Поэтому:

  ul
    li Название класса должно быть простым и коротким.
    li Название класса должно отвечать на вопрос «Что это?»
    li Не используйте сокращения кроме наиболее частых
    li Название
      strong  не должно
      |  отвечать на вопрос «Как выглядит?»

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-markup
        :code
          <!-- .product — БЭМ-блок -->
          <div class="product">
            ...
          </div>

  p Блоки можно и нужно вкладывать друг в друга. Никаких ограничений по количеству вложенных блоков нет. Ну кроме здравого смысла, конечно. Дополнительной специфики вложенные блоки не имеют. Это такие же блоки, как и все остальные.

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-markup
        :code
          <!-- .page-header — БЭМ-блок -->
          <div class="page-header">

            <!-- .logo — вложенный БЭМ-блок -->
            <a class="logo">...</a>

          </div>

  h3#c-bem-element БЭМ-элемент
  p Элемент — часть БЭМ-блока
  ul
    li Название класса формируется из названия блока с добавлением #[span.code __] и названия элемента.
    li Название класса должно быть простым и коротким.
    li Название класса должно отвечать на вопрос «Что это?»
    li Избегайте сокращений, кроме наиболее частых.
    li Название #[strong  не должно] отвечать на вопрос «Как выглядит?»

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-markup
        :code
          <div class="product">

            <!-- product__image — БЭМ-элемент блока product -->
            <img class="product__image" src="..." alt="...">

            <!-- product__description — БЭМ-элемент блока product -->
            <p class="product__description">...</p>

            <!-- product__more-link — БЭМ-элемент блока product -->
            <a class="product__more-link" href="">...</a>
          </div>

  p Элемент —
    strong  всегда часть блока
    | , вне своего блока использоваться не должен.

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-markup
        :code
          <!-- Нет ошибки: элементы лежат внутри своего блока -->
          <div class="product">
            <img class="product__image" src="..." alt="...">
            <p class="product__description">...</p>
            <a class="product__more-link" href="">...</a>
          </div>

          <!-- ОШИБКА: какой-то элемент вне своего блока -->
          <!-- (Вокруг фрагмента нет обёртки с .page-header) -->
          <form class="page-header__search">...</form>

  p Не у всех блоков должны быть элементы: кнопка — всегда БЭМ-блок, но БЭМ-элементы у неё внутри встречаются относительно редко.

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-markup
        :code
          <!-- Нет ошибки: блок без элементов -->
          <a class="btn" href="">Скачать</a>

  p Часто возникает путаница: как отличить БЭМ-блок и БЭМ-элемент. Просто задайте себе вопрос: «Эта сущность может потребоваться мне отдельно, сама по себе? Или она нужна только внутри её родителя?» Если нужна отдельно — это БЭМ-блок, если мыслима только внутри родителя — это БЭМ-элемент.
  p В действительно сомнительных случаях делайте выбор в пользу БЭМ-блока.
  p Не забывайте о миксовании (возможности иметь на одном теге и класс уровня БЭМ-элемента какого-то родительского блока, и свой класс уровня БЭМ-блока).
  p Всегда являются БЭМ-блоками:
  ul
    li кнопка,
    li блок формы (с элементами: название поля, поле, пояснение, сообщение об ошибке, ect.),
    li запись в блоге,
    li товар в каталоге,
    li табы, карусель, соц. ссылки.

  h3#c-bem-mod БЭМ-модификатор
  p Модификатор — дополнительный класс для смены оформления или поведения
  ul
    li Название класса формируется из названия блока/элемента с добавлением #[span.code --] и названия модификатора.
    li Название должно быть простым и коротким.
    li Название класса может отвечать на вопросы «Что это?», «Что меняется?», «Чем отличается от прочих?»
    li Избегайте сокращений, кроме наиболее частых.

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-markup
        :code
          <!-- .product--large — БЭМ-модификатор -->
          <div class="product  product--large">
            ...
          </div>

  p Класс модификатор никогда не должен использоваться самостоятельно, но всегда только с тем классом, который он модифицирует.
  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-markup
        :code
          <!-- Нет ошибки: модификатор сопутствует модифицируемому классу -->
          <div class="product  product--large">
            ...
          </div>

          <!-- ОШИБКА: модификатор без класса, который он модифицирует -->
          <div class="product--sale">
            ...
          </div>

  h3#c-bem-mix БЭМ-миксование
  p Миксование — наличие класса БЭМ-блока и класса БЭМ-элемента у одного тега
  ul
    li Нет ограничений на смешение БЭМ-сущностей на одном DOM-узле: cмешивать можно БЭМ-блок с БЭМ-элементом, два БЭМ-блока, два БЭМ-элемента.
    li Классы БЭМ-блоков следует писать первыми.
    li Такой подход ухудшает восприятие кода.

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-markup
        :code
          <div class="slider">
            <div class="promo  slider__inner">
              <div class="promo__item  slider__item">
                ...
              </div>
            </div>
          </div>

  h3#c-bem-files Организация БЭМ файлов
  p В файловой системе при работе с CSS-препроцессорами каждый БЭМ-блок должен быть описан в своём отдельном файле.
  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-markup
        :code
          // файл slider.less
          .slider {
            ...
          }

          // файл promo.less
          .promo {
            ...
          }
  ul
    li Компилируйте один файл (диспетчер подключений), в котором подключаются все прочие.
    li Не пишите никаких селекторов в диспетчере подключений.
    li Один БЭМ-блок = один препроцессорный файл. Всегда.
    li Файл со стилизацией БЭМ-блока должен называться так же, как сам блок.

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-markup
        :code
          blocks/              # папка с БЭМ-блоками
            page-header/       # папка БЭМ-блока
              page-header.styl # стилизация БЭМ-блока
              page-header.jade # разметка БЭМ-блока
              page-header.js   # доп. интерактив БЭМ-блока (не обязательно)
            page-footer/       # папка БЭМ-блока
            logo/              # папка БЭМ-блока
            ...

  h3#c-nesting Вложения селекторов
  ul
    li Чем меньше уровней вложенности, тем лучше.
    li Не допускайте более 3-х уровней вложенности (псевдоэлемены, псевдоселекторы и медиа-условия не считаются увеличивающими вложенность).
    li Осторожно используйте жесткое наследование.
    li Всегда оставляйте пустую строку перед вложенным селектором или #[span.code @media].
    li Всегда делайте дополнительный отступ для вложений.

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-markup
        :code
          .promo {
            display: block;
                              // пустая строка для улучшения читаемости
            a {               // первый уровень вложенности
              color: #ff0000;
                              // пустая строка для улучшения читаемости
              &:hover {       // не увеличивает уровень вложенности
                ...
              }
            }
          }

  h3#c-media-q Медиа-запросы
  ul
    li Вкладывайте #[span.code @media] в селекторы, а не наоборот.
    li Не вкладывайте #[span.code @media] друг в друга.
    li Предпочтите путь mobile-first, избегайте указания #[span.code @media]-условия max-width в пользу min-width.
    li Пишите #[span.code @media] рядом, не пишите селекторы между ними.

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-markup
        :code
          .promo {
            .promo {
              display: block;

              @media (...) {
                display: none;
              }

              @media (...) {
                display: block;
              }
            }

  h3#c-ampersand Амперсанд
  ul
    li Используйте амперсанд только перед:
      ul
        li резделителем БЭМ-элемента,
        li резделителем БЭМ-модификатора,
        li псевдоэлементом или псевдоселектором.
    li Внутри контекста блока пишите сначала псевдоселекторы и псевдоэлементы, потом модификаторы, потом элементы блока.
    li #[strong Никогда] не используйте амперсанд в местах разделения слов в селекторах.
    li #[strong Никогда] не повторяйте написанный с амперсандом селектор внутри одного контекста.

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-markup
        :code
          .promo {

            // Правильно: амперсанд перед псевдоклассом
            &:hover { ... }

            // Правильно: амперсанд перед разделителем модификатора
            &--large { ... }

            // Правильно: амперсанд перед разделителем элемента
            &__item {

              // НЕПРАВИЛЬНО: амперсанд в месте разделения слова
              &-link { ... }
            }

            // НЕПРАВИЛЬНО: амперсанд в месте разделения слова
            &-shover { ... }

            // НЕПРАВИЛЬНО: в этом контексте уже есть такой селектор
            // НЕЖЕЛАТЕЛЬНО: модификаторы нужно писать перед элементами
            &--large { ... }

          }

  h3 REM и мобильная версия Сафари

  p Несмотря на то, что мобильная версия сафари поддерживает еденицу измерения rem, есть одно исключение. При использовании rem в медиа-запросах мобильная версия Сафари ведёт себя неадекватно.

  +b.code-block
    +e.header
      span.circle
      span.circle
      span.circle
    pre
      code.language-css
        :code
          html {
            font-size: 16px;
          }

          /* Работает неправильно в мобильной версии Сафари */
          @media (min-width: 40rem) {
            html {
              font-size: 20px;
            }
          }

          /* Работает правильно */
          @media (min-width: 40em) {
            html {
              font-size: 20px;
            }
          }
